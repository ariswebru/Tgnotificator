
#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö - –ê—Ä—Ö–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è
–¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏: pip install python-telegram-bot supabase
"""

import asyncio
import logging
import os
import json
from datetime import datetime
from typing import Dict, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from supabase import create_client, Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

if not all([TELEGRAM_BOT_TOKEN, SUPABASE_URL, SUPABASE_KEY, TELEGRAM_CHAT_ID]):
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN, SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, TELEGRAM_CHAT_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

class TaskBot:
    def __init__(self):
        self.app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("my_tasks", self.my_tasks_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/my_tasks - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏
/help - –ü–æ–º–æ—â—å

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.
–¢–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á.
        """
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìã –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –∑–∞–¥–∞—á

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ /my_tasks - –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ –≤–∞—Å
‚Ä¢ –ü—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–∞—Ö

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
1. –í—ã —É–∫–∞–∑–∞–ª–∏ Telegram username –≤ –ø—Ä–æ—Ñ–∏–ª–µ
2. –í–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
3. –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ
        """
        await update.message.reply_text(help_text)
    
    async def my_tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            telegram_username = update.effective_user.username
            if not telegram_username:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram username."
                )
                return
            
            user_response = supabase.table('profiles').select('id, first_name, last_name').eq('telegram_username', telegram_username).execute()
            
            if not user_response.data:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{telegram_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
                )
                return
            
            user = user_response.data[0]
            tasks_response = supabase.table('tasks').select('*').eq('assigned_to', user['id']).neq('status', 'completed').execute()
            
            if not tasks_response.data:
                await update.message.reply_text(
                    f"üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á, {user['first_name']}!"
                )
                return
            
            tasks_text = f"üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏, {user['first_name']}:\n\n"
            
            for i, task in enumerate(tasks_response.data, 1):
                status_emoji = {
                    'todo': '‚è≥',
                    'in_progress': 'üîÑ',
                    'review': 'üëÄ',
                    'cancelled': '‚ùå'
                }.get(task['status'], 'üìù')
                
                priority_emoji = {
                    'low': 'üü¢',
                    'medium': 'üü°',
                    'high': 'üî¥',
                    'urgent': 'üö®'
                }.get(task['priority'], '‚ö™')
                
                due_date = ""
                if task['due_date']:
                    due_date = f"\nüìÖ –°—Ä–æ–∫: {datetime.fromisoformat(task['due_date'].replace('Z', '+00:00')).strftime('%d.%m.%Y')}"
                
                tasks_text += f"{i}. {status_emoji} {task['title']}\n"
                tasks_text += f"   {priority_emoji} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task['priority']}{due_date}\n\n"
            
            keyboard = []
            for task in tasks_response.data[:5]:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìù {task['title'][:30]}...", 
                        callback_data=f"task_details_{task['id']}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            await update.message.reply_text(tasks_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"Error in my_tasks_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        try:
            callback_data = query.data
            telegram_username = update.effective_user.username
            
            if not telegram_username:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram username.")
                return
            
            if callback_data.startswith('show_task_'):
                parts = callback_data.split('_')
                if len(parts) >= 4:
                    task_id = parts[2]
                    user_id = parts[3]
                    
                    user_response = supabase.table('profiles').select('id').eq('telegram_username', telegram_username).eq('id', user_id).execute()
                    
                    if not user_response.data:
                        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.")
                        return
                    
                    task_response = supabase.table('tasks').select('*').eq('id', task_id).execute()
                    
                    if not task_response.data:
                        await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                        return
                    
                    task = task_response.data[0]
                    await self.show_task_details(query, task)
            
            elif callback_data.startswith('task_details_'):
                task_id = callback_data.replace('task_details_', '')
                
                user_response = supabase.table('profiles').select('id').eq('telegram_username', telegram_username).execute()
                
                if not user_response.data:
                    await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                user_id = user_response.data[0]['id']
                task_response = supabase.table('tasks').select('*').eq('id', task_id).eq('assigned_to', user_id).execute()
                
                if not task_response.data:
                    await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
                    return
                
                task = task_response.data[0]
                await self.show_task_details(query, task)
            
            elif callback_data.startswith('update_status_'):
                parts = callback_data.split('_')
                if len(parts) >= 4:
                    task_id = parts[2]
                    new_status = parts[3]
                    await self.update_task_status(query, task_id, new_status, telegram_username)
        
        except Exception as e:
            logger.error(f"Error in handle_callback: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    async def show_task_details(self, query, task: Dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏"""
        status_text = {
            'todo': '‚è≥ –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é',
            'in_progress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
            'review': 'üëÄ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
            'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'
        }.get(task['status'], task['status'])
        
        priority_text = {
            'low': 'üü¢ –ù–∏–∑–∫–∏–π',
            'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
            'high': 'üî¥ –í—ã—Å–æ–∫–∏–π',
            'urgent': 'üö® –°—Ä–æ—á–Ω—ã–π'
        }.get(task['priority'], task['priority'])
        
        due_date_text = ""
        if task['due_date']:
            due_date = datetime.fromisoformat(task['due_date'].replace('Z', '+00:00'))
            due_date_text = f"\nüìÖ –°—Ä–æ–∫: {due_date.strftime('%d.%m.%Y %H:%M')}"
        
        estimated_hours = f"\n‚è∞ –û—Ü–µ–Ω–∫–∞: {task['estimated_hours']} —á." if task['estimated_hours'] else ""
        actual_hours = f"\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–æ: {task['actual_hours']} —á." if task['actual_hours'] else ""
        
        details_text = f"""
üìã **{task['title']}**

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üéØ –°—Ç–∞—Ç—É—Å: {status_text}
üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text}{due_date_text}{estimated_hours}{actual_hours}
        """
        
        keyboard = []
        if task['status'] not in ['completed', 'cancelled']:
            status_buttons = []
            if task['status'] != 'in_progress':
                status_buttons.append(
                    InlineKeyboardButton("üîÑ –í —Ä–∞–±–æ—Ç—É", callback_data=f"update_status_{task['id']}_in_progress")
                )
            if task['status'] != 'review':
                status_buttons.append(
                    InlineKeyboardButton("üëÄ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data=f"update_status_{task['id']}_review")
                )
            if task['status'] != 'completed':
                status_buttons.append(
                    InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"update_status_{task['id']}_completed")
                )
            
            if status_buttons:
                keyboard.append(status_buttons)
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        await query.edit_message_text(details_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def update_task_status(self, query, task_id: str, new_status: str, telegram_username: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        try:
            user_response = supabase.table('profiles').select('id').eq('telegram_username', telegram_username).execute()
            
            if not user_response.data:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            user_id = user_response.data[0]['id']
            task_response = supabase.table('tasks').select('*').eq('id', task_id).eq('assigned_to', user_id).execute()
            
            if not task_response.data:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
                return
            
            update_data = {'status': new_status}
            if new_status == 'completed':
                update_data['completed_at'] = datetime.now().isoformat()
            
            supabase.table('tasks').update(update_data).eq('id', task_id).execute()
            
            status_text = {
                'in_progress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
                'review': 'üëÄ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
                'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ'
            }.get(new_status, new_status)
            
            await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}")
            
        except Exception as e:
            logger.error(f"Error updating task status: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏.")
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.app.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TaskBot()
    bot.run()

if __name__ == '__main__':
    main()
